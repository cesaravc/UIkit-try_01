{
  "name": "npm-watch",
  "version": "0.1.8",
  "description": "run scripts from package.json when files change",
  "main": "index.js",
  "dependencies": {
    "nodemon": "^1.3.8",
    "through2": "^2.0.0"
  },
  "devDependencies": {
    "crlf": "^1.1.0",
    "markdown-code-blocks": "0.0.1",
    "tape": "~2.3.2"
  },
  "bin": {
    "npm-watch": "./cli.js"
  },
  "scripts": {
    "demo": "markdown-code-blocks -t bash < README.md",
    "exclusions": "bash -c echo 'An extension'",
    "prepublish": "crlf --set=LF cli.js watch-package.js"
  },
  "watch": {
    "test": [
      "watch-package.js",
      "test/*.js"
    ],
    "exclusions": {
      "patterns": "*",
      "extensions": "nothing",
      "ignore": "ignored.js"
    }
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/grncdr/npm-watch.git"
  },
  "bugs": {
    "url": "git://github.com/grncdr/npm-watch/issues"
  },
  "homepage": "https://github.com/grncdr/npm-watch",
  "keywords": [
    "npm",
    "watch",
    "nodemon",
    "monitor"
  ],
  "author": {
    "name": "Stephen Sugden",
    "email": "me@stephensugden.com"
  },
  "license": "MIT",
  "readme": "# npm-watch\n\nRun scripts from package.json when files change.\n\n## Synopsis\n\nInstall it:\n\n    npm install npm-watch\n\nAdd a top-level `\"watch\"` config to your `package.json` and a \"watch\" script to\nyour `\"scripts\"`:\n\n```javascript\n{\n  \"watch\": {\n    \"test\": \"{src,test}/*.js\"\n  },\n  \"scripts\": {\n    \"test\": \"tape test/*.js\",\n    \"watch\": \"npm-watch\"\n  }\n}\n```\n\nThe keys of the `\"watch\"` config should match the names of your `\"scripts\"`, and\nthe values should be a glob pattern or array of glob patterns to watch.\n\nIf you need to watch files with extensions other than those that `nodemon` watches [by default](https://github.com/remy/nodemon#specifying-extension-watch-list) (`.js`, `.coffee`, `.litcoffee`), you can set the value to an object with `patterns` and `extensions` keys. You can also add an `ignore` key (a list or a string) to ignore specific files. Finally, you can add a `quiet` flag to hide the script name in any output on stdout or stderr, or you can use the `inherit` flag to preserve the original's process stdout or stderr.\n> The `quiet` flag was changed from a `string` to a `boolean` in `0.1.5`. Backwards compatability will be kept for two patch versions.\n\n```javascript\n{\n  \"watch\": {\n    \"test\": {\n      \"patterns\": [\"src\", \"test\"],\n      \"extensions\": \"js,jsx\",\n      \"ignore\": \"src/vendor/external.min.js\",\n      \"quiet\": true\n    }\n  },\n  \"scripts\": {\n    \"test\": \"tape test/*.js\"\n  }\n}\n```\n\nStart the watcher with `npm run watch` in a terminal, then edit some files:\n\n```bash\nmkdir src test\nnpm run watch &\ncat <<EOF > test/test-sum.js\nvar test = require('tape')\ntest('sum module', function (t) {\n  var sum = require('../src/sum.js')\n  t.ok(sum(1, 2), 3, \"Sums appear correct\")\n  t.end()\n})\nEOF\n```\n\n_(Feel free to use the editor of your choice, `cat` just makes for easy demos)_\n\nYou should see that your tests ran automatically, and failed because `src/sum.js`\nis missing. Let's fix that:\n\n```bash\ncat <<EOF > src/sum.js\nmodule.exports = function (a, b)  {\n  return 1\n}\nEOF\n```\n\nOur tests will run again, and this time they *almost* work. Let's fix `sum.js`:\n\n```bash\ncat <<EOF > src/sum.js\nmodule.exports = function (a, b)  {\n  return a + b\n}\nEOF\n```\n\nTests run *perfectly*, ship it to the enterprise!\n\n## Acknowledgements\n\nThis module does very little but run [`nodemon`](http://npm.im/nodemon) for you, all\ncredit for the reliable file watching and process restarting should go to there.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "npm-watch@0.1.8",
  "dist": {
    "shasum": "cb5622f0270157d9306aff07750d06d1b903373a"
  },
  "_from": "npm-watch@^0.1.7",
  "_resolved": "https://registry.npmjs.org/npm-watch/-/npm-watch-0.1.8.tgz"
}
